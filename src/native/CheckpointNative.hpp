/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class mp_rage_launcher_checkpoint_CheckpointNative */

#ifndef _Included_mp_rage_launcher_checkpoint_CheckpointNative
#define _Included_mp_rage_launcher_checkpoint_CheckpointNative
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getType
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getType
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    destroy
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_destroy
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getDimension
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getDimension
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setDimension
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setDimension
        (JNIEnv *, jclass, jint, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getPosition
 * Signature: (I)Lmp/rage/api/vector/Vector3;
 */
JNIEXPORT jobject JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getPosition
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setPosition
 * Signature: (IFFF)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setPosition
        (JNIEnv *, jclass, jint, jfloat, jfloat, jfloat);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getRotation
 * Signature: (I)Lmp/rage/api/vector/Vector3;
 */
JNIEXPORT jobject JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getRotation
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setRotation
 * Signature: (IFFF)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setRotation
        (JNIEnv *, jclass, jint, jfloat, jfloat, jfloat);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getModel
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getModel
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setModel
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setModel
        (JNIEnv *, jclass, jint, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getVelocity
 * Signature: (I)Lmp/rage/api/vector/Vector3;
 */
JNIEXPORT jobject JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getVelocity
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getAlpha
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getAlpha
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setAlpha
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setAlpha
        (JNIEnv *, jclass, jint, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    create
 * Signature: (IFFFFFFFIIIIZI)I
 */
JNIEXPORT jint JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_create
        (JNIEnv *, jclass, jint, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jint, jint, jint, jint, jboolean, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getColour
 * Signature: (I)Lmp/rage/api/color/RGBColor;
 */
JNIEXPORT jobject JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getColour
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setColour
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setColour
        (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getDirection
 * Signature: (I)Lmp/rage/api/vector/Vector3;
 */
JNIEXPORT jobject JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getDirection
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setDirection
 * Signature: (IFFF)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setDirection
        (JNIEnv *, jclass, jint, jfloat, jfloat, jfloat);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    getRadius
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_getRadius
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setRadius
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setRadius
        (JNIEnv *, jclass, jint, jfloat);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    isVisible
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_isVisible
        (JNIEnv *, jclass, jint);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    setVisible
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_setVisible
        (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    ShowFor
 * Signature: (I[I)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_ShowFor
        (JNIEnv *, jclass, jint, jintArray);

/*
 * Class:     mp_rage_launcher_checkpoint_CheckpointNative
 * Method:    HideFor
 * Signature: (I[I)V
 */
JNIEXPORT void JNICALL Java_mp_rage_launcher_checkpoint_CheckpointNative_HideFor
        (JNIEnv *, jclass, jint, jintArray);

#ifdef __cplusplus
}
#endif
#endif
